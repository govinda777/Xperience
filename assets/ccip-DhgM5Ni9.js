import{u as e,ah as a,Q as t,x as s,a8 as r,ai as n,aj as o,ak as c,k as d,f as l,al as i,X as u}from"./index-BB0C2K8H.js";import"./vendor-BfOSbBEK.js";import"./router-BBtlhYrD.js";import"./wallet-BlXyhcsN.js";import"./analytics-CIB60-R_.js";class p extends e{constructor({callbackSelector:e,cause:t,data:s,extraData:r,sender:n,urls:o}){super(t.shortMessage||"An error occurred while fetching for an offchain result.",{cause:t,metaMessages:[...t.metaMessages||[],t.metaMessages?.length?"":[],"Offchain Gateway Call:",o&&["  Gateway URL(s):",...o.map(e=>`    ${a(e)}`)],`  Sender: ${n}`,`  Data: ${s}`,`  Callback selector: ${e}`,`  Extra data: ${r}`].flat(),name:"OffchainLookupError"})}}class f extends e{constructor({result:e,url:s}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${a(s)}`,`Response: ${t(e)}`],name:"OffchainLookupResponseMalformedError"})}}class m extends e{constructor({sender:e,to:a}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${a}`,`OffchainLookup sender address: ${e}`],name:"OffchainLookupSenderMismatchError"})}}const h="0x556f1830",y={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function w(e,{blockNumber:a,blockTag:t,data:i,to:u}){const{args:f}=s({data:i,abi:[y]}),[h,w,g,k,x]=f,{ccipRead:O}=e,j=O&&"function"==typeof O?.request?O.request:b;try{if(!r(u,h))throw new m({sender:h,to:u});const s=w.includes(n)?await o({data:g,ccipRequest:j}):await j({data:g,sender:h,urls:w}),{data:i}=await c(e,{blockNumber:a,blockTag:t,data:d([k,l([{type:"bytes"},{type:"bytes"}],[s,x])]),to:u});return i}catch(T){throw new p({callbackSelector:k,cause:T,data:i,extraData:x,sender:h,urls:w})}}async function b({data:e,sender:a,urls:s}){let r=new Error("An unknown error occurred.");for(let o=0;o<s.length;o++){const c=s[o],d=c.includes("{data}")?"GET":"POST",l="POST"===d?{data:e,sender:a}:void 0,p="POST"===d?{"Content-Type":"application/json"}:{};try{const s=await fetch(c.replace("{sender}",a.toLowerCase()).replace("{data}",e),{body:JSON.stringify(l),headers:p,method:d});let n;if(n=s.headers.get("Content-Type")?.startsWith("application/json")?(await s.json()).data:await s.text(),!s.ok){r=new i({body:l,details:n?.error?t(n.error):s.statusText,headers:s.headers,status:s.status,url:c});continue}if(!u(n)){r=new f({result:n,url:c});continue}return n}catch(n){r=new i({body:l,details:n.message,url:c})}}throw r}export{b as ccipRequest,w as offchainLookup,y as offchainLookupAbiItem,h as offchainLookupSignature};
