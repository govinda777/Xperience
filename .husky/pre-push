#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Função para executar comandos com tratamento de erro
execute_step() {
  local step_name="$1"
  local command_to_run="$2"
  
  echo -e "${BLUE}ℹ️  ${step_name}...${NC}"
  
  # Executa o comando e captura a saída
  if output=$(${command_to_run} 2>&1); then
    echo -e "${GREEN}✅ ${step_name} concluído com sucesso!${NC}"
    return 0
  else
    echo -e "${RED}❌ Erro durante ${step_name,,}${NC}"
    echo "${output}"
    return 1
  fi
}

echo -e "${BLUE}🚀 Iniciando verificações de pre-push...${NC}"

# 1. Verificação de tipos TypeScript
execute_step "Verificando tipos TypeScript" "yarn type-check" || exit 1

# 2. Testes unitários
execute_step "Executando testes unitários" "yarn test:unit" || exit 1

# 3. Build do projeto (com timeout de 60 segundos)
echo -e "${BLUE}ℹ️  Realizando build do projeto...${NC}"
if ! output=$(timeout 60s yarn build 2>&1); then
  echo -e "${RED}❌ Erro durante o build do projeto (ou timeout)${NC}"
  echo "${output}"
  echo -e "${YELLOW}💡 Dica: Tente executar 'yarn build' localmente para mais detalhes${NC}"
  exit 1
fi

echo -e "${GREEN}✅ Build do projeto concluído com sucesso!${NC}"

# 4. Verificações de segurança (opcional - remover se não for necessário)
# execute_step "Executando verificações de segurança" "yarn security:check && yarn security:audit" || exit 1

echo -e "\n${GREEN}🎉 Todas as verificações foram concluídas com sucesso!${NC}"