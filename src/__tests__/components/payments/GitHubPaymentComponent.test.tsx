import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';
import { GitHubPaymentComponent } from '../../../components/payments/GitHubPaymentComponent';
import { GitHubPaymentProvider } from '../../../services/providers/githubPaymentProvider';

// Mock do provider
jest.mock('../../../services/providers/githubPaymentProvider');

const MockedGitHubPaymentProvider = GitHubPaymentProvider as jest.MockedClass<typeof GitHubPaymentProvider>;

describe('GitHubPaymentComponent', () => {
  const defaultProps = {
    amount: 100,
    planId: 'plan-1',
    userId: 'user-1',
    onPaymentComplete: jest.fn(),
    onPaymentError: jest.fn(),
    onCancel: jest.fn()
  };

  const mockPaymentResult = {
    transactionId: 'github-test-123',
    paymentUrl: 'https://github.com/sponsors/testuser/sponsorships?sponsor=testuser&frequency=one-time&amount=18&preview=true',
    amount: 18,
    currency: 'USD' as const,
    metadata: {
      username: 'testuser',
      sponsorshipUrl: 'https://github.com/sponsors/testuser/sponsorships?sponsor=testuser&frequency=one-time&amount=18&preview=true',
      amount: 18,
      frequency: 'one-time',
      planId: 'plan-1',
      userId: 'user-1',
      externalReference: 'user-1-plan-1-123456789'
    }
  };

  const mockInstructions = {
    title: 'Como pagar via GitHub Sponsors',
    steps: [
      '1. Clique no bot√£o "Pagar com GitHub" abaixo',
      '2. Voc√™ ser√° redirecionado para o GitHub Sponsors',
      '3. Fa√ßa login na sua conta GitHub (se necess√°rio)',
      '4. Confirme o patroc√≠nio de $18 USD',
      '5. Complete o pagamento usando seu m√©todo preferido no GitHub',
      '6. Aguarde a confirma√ß√£o do pagamento'
    ],
    notes: [
      'üí° Valor: $18 USD (aproximadamente R$ 99.00)',
      'üîí Pagamento processado de forma segura pelo GitHub',
      '‚è±Ô∏è A confirma√ß√£o pode levar alguns minutos',
      'üìß Voc√™ receber√° um email de confirma√ß√£o do GitHub',
      'üéØ Seu acesso ser√° liberado ap√≥s a confirma√ß√£o manual'
    ]
  };

  beforeEach(() => {
    jest.clearAllMocks();
    
    MockedGitHubPaymentProvider.mockImplementation(() => ({
      validateConfiguration: jest.fn().mockReturnValue({ isValid: true, errors: [] }),
      process: jest.fn().mockResolvedValue(mockPaymentResult),
      generatePaymentInstructions: jest.fn().mockReturnValue(mockInstructions),
      convertUsdToBrl: jest.fn().mockReturnValue(99.00),
      verify: jest.fn().mockResolvedValue('pending'),
      cancel: jest.fn().mockResolvedValue(false),
      processWebhook: jest.fn(),
      getGitHubProfile: jest.fn(),
      id: 'github',
      name: 'GitHub Pay',
      type: 'fiat',
      supportedCurrencies: ['USD']
    } as any));
  });

  describe('Renderiza√ß√£o inicial', () => {
    it('deve renderizar estado de carregamento', () => {
      render(<GitHubPaymentComponent {...defaultProps} />);
      
      expect(screen.getByText('Preparando pagamento GitHub...')).toBeInTheDocument();
    });

    it('deve renderizar componente ap√≥s inicializa√ß√£o', async () => {
      render(<GitHubPaymentComponent {...defaultProps} />);
      
      await waitFor(() => {
        expect(screen.getByText('GitHub Pay')).toBeInTheDocument();
      });

      expect(screen.getByText('Patrocine via GitHub Sponsors')).toBeInTheDocument();
      expect(screen.getByText('$18 USD')).toBeInTheDocument();
      expect(screen.getByText('‚âà R$ 99.00')).toBeInTheDocument();
    });
  });

  describe('Exibi√ß√£o de informa√ß√µes', () => {
    beforeEach(async () => {
      render(<GitHubPaymentComponent {...defaultProps} />);
      await waitFor(() => {
        expect(screen.getByText('GitHub Pay')).toBeInTheDocument();
      });
    });

    it('deve exibir valor correto', () => {
      expect(screen.getByText('$18 USD')).toBeInTheDocument();
      expect(screen.getByText('‚âà R$ 99.00')).toBeInTheDocument();
    });

    it('deve exibir status inicial como pendente', () => {
      expect(screen.getByText('Aguardando pagamento')).toBeInTheDocument();
    });

    it('deve exibir instru√ß√µes de pagamento', () => {
      expect(screen.getByText('Como pagar via GitHub Sponsors')).toBeInTheDocument();
      expect(screen.getByText(/Clique no bot√£o "Pagar com GitHub"/)).toBeInTheDocument();
      expect(screen.getByText(/Voc√™ ser√° redirecionado para o GitHub Sponsors/)).toBeInTheDocument();
    });

    it('deve exibir notas importantes', () => {
      expect(screen.getByText(/Valor: \$18 USD/)).toBeInTheDocument();
      expect(screen.getByText(/üîí Pagamento processado de forma segura pelo GitHub/)).toBeInTheDocument();
    });

    it('deve exibir informa√ß√µes do GitHub', () => {
      expect(screen.getByText('Patrocinando: @testuser')).toBeInTheDocument();
      expect(screen.getByText('Ver perfil GitHub ‚Üí')).toBeInTheDocument();
    });
  });

  describe('Intera√ß√µes do usu√°rio', () => {
    beforeEach(async () => {
      render(<GitHubPaymentComponent {...defaultProps} />);
      await waitFor(() => {
        expect(screen.getByText('GitHub Pay')).toBeInTheDocument();
      });
    });

    it('deve abrir GitHub Sponsors ao clicar no bot√£o de pagamento', () => {
      const openSpy = jest.spyOn(window, 'open').mockImplementation();
      
      const payButton = screen.getByText('Pagar com GitHub Sponsors');
      fireEvent.click(payButton);
      
      expect(openSpy).toHaveBeenCalledWith(
        mockPaymentResult.paymentUrl,
        '_blank',
        'noopener,noreferrer'
      );
      
      openSpy.mockRestore();
    });

    it('deve atualizar status para processando ap√≥s clicar em pagar', async () => {
      const openSpy = jest.spyOn(window, 'open').mockImplementation();
      
      const payButton = screen.getByText('Pagar com GitHub Sponsors');
      fireEvent.click(payButton);
      
      await waitFor(() => {
        expect(screen.getByText('Processando pagamento...')).toBeInTheDocument();
      });
      
      openSpy.mockRestore();
    });

    it('deve permitir confirma√ß√£o manual', async () => {
      const openSpy = jest.spyOn(window, 'open').mockImplementation();
      
      // Clicar em pagar primeiro
      const payButton = screen.getByText('Pagar com GitHub Sponsors');
      fireEvent.click(payButton);
      
      await waitFor(() => {
        expect(screen.getByText('‚úÖ J√° paguei - Confirmar manualmente')).toBeInTheDocument();
      });
      
      // Clicar em confirmar manualmente
      const confirmButton = screen.getByText('‚úÖ J√° paguei - Confirmar manualmente');
      fireEvent.click(confirmButton);
      
      await waitFor(() => {
        expect(screen.getByText(/Obrigado pelo seu patroc√≠nio/)).toBeInTheDocument();
      });
      
      expect(defaultProps.onPaymentComplete).toHaveBeenCalledWith(mockPaymentResult);
      
      openSpy.mockRestore();
    });

    it('deve chamar onCancel ao clicar no bot√£o de cancelar', () => {
      const cancelButton = screen.getByText('‚úï');
      fireEvent.click(cancelButton);
      
      expect(defaultProps.onCancel).toHaveBeenCalled();
    });
  });

  describe('Estados do pagamento', () => {
    it('deve exibir estado de processamento corretamente', async () => {
      const openSpy = jest.spyOn(window, 'open').mockImplementation();
      
      render(<GitHubPaymentComponent {...defaultProps} />);
      
      await waitFor(() => {
        expect(screen.getByText('GitHub Pay')).toBeInTheDocument();
      });
      
      const payButton = screen.getByText('Pagar com GitHub Sponsors');
      fireEvent.click(payButton);
      
      await waitFor(() => {
        expect(screen.getByText('üîÑ')).toBeInTheDocument();
        expect(screen.getByText('Processando pagamento...')).toBeInTheDocument();
        expect(screen.getByText('Pagamento em andamento!')).toBeInTheDocument();
      });
      
      openSpy.mockRestore();
    });

    it('deve exibir estado de conclus√£o corretamente', async () => {
      const openSpy = jest.spyOn(window, 'open').mockImplementation();
      
      render(<GitHubPaymentComponent {...defaultProps} />);
      
      await waitFor(() => {
        expect(screen.getByText('GitHub Pay')).toBeInTheDocument();
      });
      
      // Simular fluxo completo
      const payButton = screen.getByText('Pagar com GitHub Sponsors');
      fireEvent.click(payButton);
      
      await waitFor(() => {
        expect(screen.getByText('‚úÖ J√° paguei - Confirmar manualmente')).toBeInTheDocument();
      });
      
      const confirmButton = screen.getByText('‚úÖ J√° paguei - Confirmar manualmente');
      fireEvent.click(confirmButton);
      
      await waitFor(() => {
        expect(screen.getByText('üéâ')).toBeInTheDocument();
        expect(screen.getByText(/Obrigado pelo seu patroc√≠nio/)).toBeInTheDocument();
      });
      
      openSpy.mockRestore();
    });
  });

  describe('Tratamento de erros', () => {
    it('deve exibir erro quando valida√ß√£o falha', async () => {
      MockedGitHubPaymentProvider.mockImplementation(() => ({
        validateConfiguration: jest.fn().mockReturnValue({ 
          isValid: false, 
          errors: ['Configura√ß√£o inv√°lida'] 
        }),
        process: jest.fn(),
        generatePaymentInstructions: jest.fn(),
        convertUsdToBrl: jest.fn(),
        verify: jest.fn(),
        cancel: jest.fn(),
        processWebhook: jest.fn(),
        getGitHubProfile: jest.fn(),
        id: 'github',
        name: 'GitHub Pay',
        type: 'fiat',
        supportedCurrencies: ['USD']
      } as any));
      
      render(<GitHubPaymentComponent {...defaultProps} />);
      
      await waitFor(() => {
        expect(defaultProps.onPaymentError).toHaveBeenCalledWith(
          'Configura√ß√£o inv√°lida: Configura√ß√£o inv√°lida'
        );
      });
    });

    it('deve exibir erro quando processamento falha', async () => {
      MockedGitHubPaymentProvider.mockImplementation(() => ({
        validateConfiguration: jest.fn().mockReturnValue({ isValid: true, errors: [] }),
        process: jest.fn().mockRejectedValue(new Error('Erro no processamento')),
        generatePaymentInstructions: jest.fn(),
        convertUsdToBrl: jest.fn(),
        verify: jest.fn(),
        cancel: jest.fn(),
        processWebhook: jest.fn(),
        getGitHubProfile: jest.fn(),
        id: 'github',
        name: 'GitHub Pay',
        type: 'fiat',
        supportedCurrencies: ['USD']
      } as any));
      
      render(<GitHubPaymentComponent {...defaultProps} />);
      
      await waitFor(() => {
        expect(defaultProps.onPaymentError).toHaveBeenCalledWith(
          'Erro no processamento'
        );
      });
    });

    it('deve exibir componente de erro quando inicializa√ß√£o falha', async () => {
      MockedGitHubPaymentProvider.mockImplementation(() => ({
        validateConfiguration: jest.fn().mockReturnValue({ isValid: true, errors: [] }),
        process: jest.fn().mockRejectedValue(new Error('Falha na inicializa√ß√£o')),
        generatePaymentInstructions: jest.fn(),
        convertUsdToBrl: jest.fn(),
        verify: jest.fn(),
        cancel: jest.fn(),
        processWebhook: jest.fn(),
        getGitHubProfile: jest.fn(),
        id: 'github',
        name: 'GitHub Pay',
        type: 'fiat',
        supportedCurrencies: ['USD']
      } as any));
      
      render(<GitHubPaymentComponent {...defaultProps} />);
      
      await waitFor(() => {
        expect(defaultProps.onPaymentError).toHaveBeenCalled();
      });
    });
  });

  describe('Links externos', () => {
    beforeEach(async () => {
      render(<GitHubPaymentComponent {...defaultProps} />);
      await waitFor(() => {
        expect(screen.getByText('GitHub Pay')).toBeInTheDocument();
      });
    });

    it('deve ter link para perfil GitHub com atributos corretos', () => {
      const profileLink = screen.getByText('Ver perfil GitHub ‚Üí');
      
      expect(profileLink).toHaveAttribute('href', 'https://github.com/testuser');
      expect(profileLink).toHaveAttribute('target', '_blank');
      expect(profileLink).toHaveAttribute('rel', 'noopener noreferrer');
    });
  });

  describe('Acessibilidade', () => {
    beforeEach(async () => {
      render(<GitHubPaymentComponent {...defaultProps} />);
      await waitFor(() => {
        expect(screen.getByText('GitHub Pay')).toBeInTheDocument();
      });
    });

    it('deve ter bot√µes com texto descritivo', () => {
      expect(screen.getByText('Pagar com GitHub Sponsors')).toBeInTheDocument();
      expect(screen.getByText('‚úï')).toBeInTheDocument();
    });

    it('deve ter informa√ß√µes de seguran√ßa vis√≠veis', () => {
      expect(screen.getByText(/Pagamento processado de forma segura pelo GitHub Sponsors/)).toBeInTheDocument();
      expect(screen.getByText(/Seus dados est√£o protegidos/)).toBeInTheDocument();
    });
  });
});
