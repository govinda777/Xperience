name: Payment Tests CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/components/payments/**'
      - 'src/services/providers/**'
      - 'src/types/payment.ts'
      - 'src/config/payment.ts'
      - 'src/__tests__/**'
      - 'features/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/components/payments/**'
      - 'src/services/providers/**'
      - 'src/types/payment.ts'
      - 'src/config/payment.ts'
      - 'src/__tests__/**'
      - 'features/**'

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run unit tests
      run: npm run test:unit
    
    - name: Generate coverage report
      run: npm run test:coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run integration tests
      run: npm run test:integration

  bdd-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run BDD tests
      run: npm run test:bdd
    
    - name: Generate BDD report
      run: npm run test:bdd:html
      if: always()
    
    - name: Upload BDD report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bdd-report
        path: reports/cucumber-report.html

  payment-specific-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run payment-specific tests
      run: npm run test:payments
    
    - name: Test PIX provider
      run: npm test -- pixPaymentProvider
    
    - name: Test Bitcoin provider
      run: npm test -- bitcoinPaymentProvider
    
    - name: Test USDT provider
      run: npm test -- usdtPaymentProvider

  security-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level moderate
    
    - name: Check for sensitive data in tests
      run: |
        if grep -r "sk_live\|pk_live\|access_token\|secret_key" src/__tests__/ features/; then
          echo "❌ Sensitive data found in tests"
          exit 1
        else
          echo "✅ No sensitive data found in tests"
        fi

  coverage-check:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Generate full coverage report
      run: npm run test:coverage
    
    - name: Check coverage thresholds
      run: |
        npm run test:coverage -- --passWithNoTests
        echo "✅ Coverage thresholds met"
    
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = './coverage/coverage-summary.json';
          
          if (fs.existsSync(path)) {
            const coverage = JSON.parse(fs.readFileSync(path, 'utf8'));
            const total = coverage.total;
            
            const comment = `## 📊 Test Coverage Report
            
            | Metric | Percentage | Status |
            |--------|------------|--------|
            | Lines | ${total.lines.pct}% | ${total.lines.pct >= 70 ? '✅' : '❌'} |
            | Functions | ${total.functions.pct}% | ${total.functions.pct >= 70 ? '✅' : '❌'} |
            | Branches | ${total.branches.pct}% | ${total.branches.pct >= 70 ? '✅' : '❌'} |
            | Statements | ${total.statements.pct}% | ${total.statements.pct >= 70 ? '✅' : '❌'} |
            
            **Payment Components Coverage**: Target 80%
            **Payment Providers Coverage**: Target 85%
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

  performance-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run performance tests
      run: |
        # Test payment provider performance
        npm test -- --testNamePattern="performance" --verbose
    
    - name: Check test execution time
      run: |
        # Ensure tests complete within reasonable time
        timeout 300 npm run test:all || {
          echo "❌ Tests took longer than 5 minutes"
          exit 1
        }

  notify-results:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, bdd-tests, payment-specific-tests, coverage-check]
    if: always()
    
    steps:
    - name: Notify test results
      uses: actions/github-script@v6
      with:
        script: |
          const results = {
            'unit-tests': '${{ needs.unit-tests.result }}',
            'integration-tests': '${{ needs.integration-tests.result }}',
            'bdd-tests': '${{ needs.bdd-tests.result }}',
            'payment-specific-tests': '${{ needs.payment-specific-tests.result }}',
            'coverage-check': '${{ needs.coverage-check.result }}'
          };
          
          const failed = Object.entries(results).filter(([_, result]) => result === 'failure');
          const success = Object.entries(results).filter(([_, result]) => result === 'success');
          
          let message = `## 🧪 Payment Tests Results\n\n`;
          
          if (failed.length === 0) {
            message += `✅ All payment tests passed successfully!\n\n`;
          } else {
            message += `❌ Some tests failed:\n\n`;
            failed.forEach(([test, _]) => {
              message += `- ❌ ${test}\n`;
            });
            message += `\n`;
          }
          
          message += `### Test Summary\n`;
          success.forEach(([test, _]) => {
            message += `- ✅ ${test}\n`;
          });
          
          if (context.eventName === 'pull_request') {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
          }
          
          console.log(message);
