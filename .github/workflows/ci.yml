name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  YARN_VERSION: '3.6.4'
  CI: true

defaults:
  run:
    shell: bash

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
    
    - name: Install dependencies
      run: |
        corepack enable
        yarn set version ${{ env.YARN_VERSION }}
        yarn install --immutable --inline-builds
    
    - name: Run tests
      run: yarn ci:test
      
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      if: github.event_name == 'push' && matrix.os == 'ubuntu-latest'
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage/lcov.info
        fail_ci_if_error: false

  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
    
    - name: Install dependencies
      run: |
        corepack enable
        yarn set version ${{ env.YARN_VERSION }}
        yarn install --immutable --inline-builds
    
    - name: Run linting and type checking
      run: yarn ci:lint

  build:
    name: Build
    needs: [test, lint]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
    
    - name: Install dependencies
      run: |
        corepack enable
        yarn set version ${{ env.YARN_VERSION }}
        yarn install --immutable --inline-builds
    
    - name: Build application
      run: yarn ci:build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          dist/
          package.json
          yarn.lock
        retention-days: 7

  deploy:
    name: Deploy
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: .
    
    # Add your deployment steps here
    # Example for Vercel:
    # - name: Install Vercel CLI
    #   run: npm install --global vercel@latest
      
    # - name: Deploy to Vercel
    #   run: vercel --prod --token ${{ secrets.VERCEL_TOKEN }}
    #   env:
    #     VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
    #     VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
